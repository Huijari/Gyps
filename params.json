{
  "name": "Gyps",
  "tagline": "Cheap reactive programming library",
  "body": "# Gyps\r\n> Cheap reactive programming library\r\n\r\n![logo.jpg](https://github.com/Huijari/Gyps/raw/master/logo.jpg)\r\n\r\n## Example\r\n> Slightly modified version of [xstream](https://github.com/staltz/xstream)'s example.\r\n```js\r\nconst tick$ = Gyps();\r\nsetInterval(tick$.emit, 1000); // Gpys doesn't provide event sources by design\r\nconst number$ = tick$ // Base stream\r\n  .scan(count => count + 1, 0) // Increment every time\r\n  .filter(number => number % 2 === 0) // Only even numbers\r\n  .map(number => number * number) // Map to square\r\n  .observe(number => console.log(number)); // Log each number\r\n```\r\n\r\n## API\r\n### Gyps()\r\nCreate a stream.\r\n\r\n### gyps.emit(data)\r\nEmit an event, calling all observers.\r\n> param data Data object to be used on calling observers\r\n\r\n### gyps.observe(observer)\r\nAdd a new observer. If an event was emitted before, the observer is called with the last value.\r\n> param observer Observer function to be added\r\n\r\n### gyps.constant(value)\r\nMap all values to a constant.\r\n> param value Constant that will be emitted\r\n\r\n### gyps.filter(predicate)\r\nOnly emit values that pass the predicate.\r\n> param predicate Test function, returns true if pass\r\n\r\n### gyps.flatten()\r\nTransform a observable of observables into a observable of values emitted by values of the original observable.\r\n\r\n### gyps.map(mapper)\r\nTransform each value by a function.\r\n> param mapper Function that will be applied to each value\r\n\r\n### gyps.merge(stream[, stream])\r\nCombine multiple observables into one.\r\n> param streams Observables to be joined\r\n\r\n### gyps.scan(reducer, initial)\r\nAccumulate values using a function.\r\n> param reducer Function that receives the accumulated value and a new value, and return the new accumulated\r\n> param initial Initial value\r\n\r\n### gyps.trigger(stream)\r\nTakes an observable of values, each time the original observable emits, this observable emits the last value emitted by the observable of values.\r\n> param stream Observable of values to be emitted\r\n\r\n### gyps.wrap(key)\r\nWrap each value into an object with the key provided.\r\n> param key Key used to wrap values\r\n\r\n## Meta\r\nThis project is based on [eye](https://github.com/huijari/eye), and the minified+gzip version has less than 1Kb.\r\n\r\nDistributed under Apache license. See ``LICENSE`` for more information.\r\n\r\n[Huijari](https://github.com/Huijari)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}